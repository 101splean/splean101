//Задание №1. Деструктуризация
//Есть следующий код:
let arr = ["Tom", "Sam", "Ray", "Bob"];
let [/* Ваш код */] = arr;
console.log(x); // "Tom"
console.log(y); // "Sam"
console.log(z); // [Bob]
//Допишите код используя деструктуризацию, чтобы в консоли браузера появились строки, которые написаны в комментариях.

//Задание №2. Деструктуризация
//Есть следующий код:
/*let names = {
   first: "Tom",
   second: "Sam",
   third: "Ray", 
   fourth: "Bob"
};*/
//let {/* Ваш код */} = names;
//console.log(f); // "Tom"
//console.log(x); // "Ray"
//console.log(fifth); // "Name №5"
//Допишите код используя деструктуризацию, чтобы в консоли браузера появились строки, которые написаны в комментариях.

//Задание №3. Деструктуризация
//Есть следующий код:
/*let data = {
   names: ["Sam", "Tom", "Ray", "Bob"],
   ages: [20, 24, 22, 26],
};*/
//let /* Ваш код */ = data;
/*console.log(name2); // "Tom"
console.log(age2); // 24
console.log(name4); // "Bob"
console.log(age4); // 26*/
//Допишите код используя деструктуризацию, чтобы в консоли браузера появились строки, которые написаны в комментариях.

//Задание №4. Функции
//Напишите функцию mul(), которая принимает любое количество параметров разного типа и возвращает произведение параметров типа Number.
//Если параметры типа Number отсутствуют, возвращает число 0.
/*function mul() {
   // Ваш код
}
console.log(mul(1, "str", 2, 3, true)); // 6
console.log(mul(null, "str", false, true)); // 0*/
//Нельзя использовать свойство arguments, но в функцию mul() можно добавить один параметр.

//Задание №5. Функции
//Есть следующий код:
/*let obj = {
   name: "obj",
   print: function () {
      // Ваш код
   }
};
function multiCaller(func, count) {
   for (let i = 0; i < count; i++) {
      func();
   }
}
multiCaller(obj.print(), 3);*/  // "obj", 3 раза
//Допишите код используя стрелочные функции, чтобы в консоли браузера появились строки, которые написаны в комментариях.

//Задание №6. Функции
//Есть следующий код:
/*let server = {
   data: 0,
   convertToString: function (callback) {
      callback((function () {
         return this.data + "";
      }).bind(this));
   }
};
let client = {
   server: server,
   result: "",
   calc: function (data) {
      this.server.data = data;
      this.server.convertToString(this.notification());
   },
   notification: function () {
      return (function (callback) {
         this.result = callback();
      }).bind(this);
   }
};
client.calc(123);
console.log(client.result); // "123"
console.log(typeof client.result);*/ // "string"
//Измените код используя стрелочные функции, чтобы в коде не использовались методы bind().

//Задание №7. Строки
//Есть следующий код:
/*let names = {
   first: "Tom",
   second: "Sam",
   third: "Ray"
};*/
//console.log(/* Ваш код */); // "Первый: -Tom-, Второй - "Sam", Третий => 'Ray'"
//Допишите код используя интерполяцию, чтобы в консоли браузера появилась строка, которая написана в комментариях.

//Задание №8. Строки
//Напишите функцию шаблонизации format(), которая выводит строку в обратном порядке.
//Примеры использования функции format():
/*function format(s, ...v) {
   // Ваш код
   let arr = v.slice();
   arr.reverse();
   arr.push(s);
   return arr;
}
let res1 = format`${1} + ${2} = ${3}`; // "3 = 2 + 1"
console.log(res1);
let res2 = format`Привет ${"Мир "}`; // "Мир Привет "
console.log(res2);
let res3 = format`left${"<->"}right`; // "right<->left"
console.log(res3);*/

'use strict';

/*var calculator = {
	numb1: 0,
	numb2: 0,
	read: function () {
		this.numb1 = +prompt('put the number', 'number');
		this.numb2 = +prompt('put the number', 'number');
	},
	sum: function () {
		return this.numb1 + this.numb2;
	},
	mul: function(){
		return this.numb1 * this.numb2;
	}
};
calculator.read();
console.log(calculator.sum());
console.log(calculator.mul());*/
/*Напишите аналог метода bind():
function bind(func, context) {
   
}
function func() {
   console.log(this.name + " - "+ this.age);
}
var user = {
   name: "Tom",
   age: 20
};
var f = bind(func, user);
f(); */

 /*function audio (){
	var _vol = 0;
	function nV(vol){
		if (vol>0 && vol<=100){
			_vol = vol;
		}
	}
	this.getVol = function (){
		return _vol;
	};
	this.setVol = function(vol){
	nV(vol);
	};
}
var a = new audio('mp3');
console.log(a.getVol());
a.setVol(5);
console.log(a.getVol());*/

/*function audio (vol){
	var _vol = 0;
	function nV(vol){
		if (vol>0 && vol<=100){
			_vol = vol;
		};
	};
	nV(vol)
	this.vol = function (vol) {
   if (vol === undefined) {
      return _vol;
   }
   nV(vol);
};
}
var a = new audio(9);
console.log(a.vol());
a.vol(15);
console.log(a.vol());*/

/*Задание №5. Инкапсуляция
Напишите конструктор для объектов Сумматор, со следующим функционалом:
1. Приватное свойство firstNumber;
2. Приватное свойство secondNumber;
3. Публичное свойство result;
4. Приватный метод calc(), который записывает в result сумму свойств
firstNumber и secondNumber;
5. Единые методы геттер-сеттер для свойств firstNumber и secondNumber,
во время работы методов как сеттер, должна происходить валидация
(устанавливать можно только значения типа Number),
если валидация происходит успешно, должен вызываться метод calc().
Получается, что при успешной установке либо firstNumber либо secondNumber,
происходит перерасчет result.*/

/*function sum (firstNumber, secondNumber){
	var _firstNumber, _secondNumber;
	this.result = 0;
	function calc (){
	   result =_firstNumber + _secondNumber;
	   return result;
    };
	function firstNumberValidation(firstNumber){
		if (typeof firstNumber === 'number' ){
			_firstNumber = firstNumber;
		};
	};
	function secondNumberValidation(secondNumber){
		if (typeof secondNumber === 'number'){
			_secondNumber = secondNumber;
		};
	};
	
	firstNumberValidation(firstNumber);
	secondNumberValidation(secondNumber);
	
	this._firstNumber = function (firstNumber) {
   if (!firstNumber) {
      return _firstNumber;
	};
		firstNumberValidation(firstNumber);
		if(firstNumberValidation){
			return calc();
		};
	};
	
	this._secondNumber = function (secondNumber) {
      if(!secondNumber){
	  return _secondNumber;
	};
		secondNumberValidation(secondNumber);
		if(secondNumberValidation){
			return calc();
		};
	};
 };
 var obj = new sum(3, 5);
console.log(obj._secondNumber());
console.log(obj._firstNumber());
obj._secondNumber(101);
console.log(obj._secondNumber());
console.log(obj.result);*/


/*Задание №6. Модули
Напишите код для "безопасного" вычисления периметра и площади прямоугольника в виде модуля.
Сторонами прямоугольника может быть только число (тип данных Number, значения других типов данных нельзя устанавливать), значение которого, строго больше 0.*/


//Задание №3. Асинхронное программирование
//Напишите функцию random(min, max, delay, callback), которая через delay миллисекунд помещает callback в очередь на выполнение.
//Если min меньше max, функция генерирует случайно число в диапазоне от min до max и передает в callback вторым параметром.
//Если min больше max, функция создает объект ошибки и передает в callback первым параметром.
//Для генерации случайных чисел можно использовать метод Math.random().
//Примеры использования функции:
/*function random(min, max, delay, callback) {
   var data;
   var error;
   if (min<max){
	   data = Math.floor(Math.random() * (max - min)) + min;
   }else if(min>max){
	   error = new Error ("Invalid parameters");
   };
   
   setTimeout(function () { callback(error, data) }, delay);
};
function callback(error, data){
	if (error) {
      throw error;
   }
   console.log(data);
};

random(-100, 100, 2000, callback);
random(1, 300, 3000, callback);
random(1000, 100, 4000,callback);
random(1, 300, 5000, callback);/*
//Через две секунды, на экране должно появится случайной число от 1 до 100.
//Через три секунды, на экране должна появится информация об ошибке.


/*Задание №3. Встроенные типы объектов
Напишите программу, которая запрашивает у пользователя строки (prompt()). 
Ввод строк должен быть завершен, когда пользователь вводит строку end. 
Далее программа проверяет, есть ли в строке цифры, если да, добавляет 
в начало строки текст "Numbers: ", если нет – "No numbers: " и выводит 
результат в виде следующей таблицы:

+-----------------+---------------------+
| Исходная строка | Обработанная строка |
+-----------------+---------------------+
| строка_1        | строка_1_обр        |
+-----------------+---------------------+
| строка_2        | строка_2_обр        |
+-----------------+---------------------+
*/

/*var arr = [];
for (var i = 0; i >= 0; i++){
	var temp = prompt('put your string', '');
	if( temp !== 'end'){
		arr[i] = temp;
	}else{
		break
		};
};
console.log(arr);

var arr1 = arr.slice();
for (var key in arr1){
	if (isNaN( arr1[key])){
		arr1[key] = 'No numbers: ' + arr1[key];
	}else{
		arr1[key] = 'Numbers: ' + arr1[key];
	};
};
console.log(arr1);

for (var j = 0; j < arr.length; j++){
	console.log(arr[j] + ' ' + arr1[j]);
};*/

/*Задание №4. Встроенные типы объектов
Напишите функцию addTwoDays(date), которая принимает объект типа Date и добавляет к дате данного объекта два дня.*/

/*var date = new Date();
function chng(date){
	return date.setDate(date.getDate() + 2);
};
chng(date);
console.log(date);*/

/*Задание №5. Встроенные типы объектов
1. Создайте массив с элементами "Джаз", "Блюз";
2. Добавьте в конец элемент "Рок-н-Ролл";
3. Замените предпоследний элемент с конца на "Классика". Код замены должен быть универсальный, т.е. работать для массивов любой длины;
4. Удалите первый элемент массива и выведите его на экран;
5. Добавьте в начало элементы "Рэп" и "Регги".

Массив в результате каждого шага:
1. ["Джаз", "Блюз"]
2. ["Джаз", "Блюз", "Рок-н-Ролл"]
3. ["Джаз", "Классика", "Рок-н-Ролл"]
4. ["Классика", "Рок-н-Ролл"]
5. ["Рэп", "Регги", "Классика", "Рок-н-Ролл"]*/

/*var genres = ['Джаз', 'Блюз'];
console.log(genres);
genres.push('Рок-н-Ролл');
console.log(genres);
genres.splice(genres.length-2, 1, "Классика"); 
console.log(genres);
alert(genres.shift());
console.log(genres);
genres.unshift('Рэп', 'Регги');
console.log(genres);*/

/*Задание №6. Встроенные типы объектов
Расширьте тип объектов Array методом sortDesc(), который сортирует массив по убыванию.
// Ваш код
var arr = [5, 1, 4, 2, 3];
arr.sortDesc();
console.log(arr); // [5, 4, 3, 2, 1]*/
/*function sortDesc(){
	this.sort();
	this.reverse();
};
Array.prototype.sortDesc = sortDesc;
var arr = [5, 1, 4, 2, 3];
arr.sortDesc();
console.log(arr); // [5, 4, 3, 2, 1];*/

/*Задание №7. Встроенные типы объектов
Напишите функцию deleteEvenNumbers(array), которая принимает массив array, удаляет из массива
 array четные числа и возвращает его.*/
/*function deleteEvenNumbers(array) {
	for(var key in array){
		if(array[key]%2 == 0){
			array.splice(key, 1);
		};
	};
	return array;
};
var arr = [1, 2, 3, 4, 5];
var arr = deleteEvenNumbers(arr);
console.log(arr); // [1, 3, 5];*/

/*Задание №8. Встроенные типы объектов
Есть следующий код:*/
/*var arr = ["Tom", "Sam", "Bob"];
var arrLength = [];
//for (var i = 0; i < arr.length; i++) {
   //arrLength[i] = "<li>" + arr[i] + "</li>";
//}
function viceFor (value){
	return "<li>" + value + "</li>";
};
arrLength = arr.map(viceFor);
console.log(arrLength); // ["<li>Tom</li>", "<li>Sam</li>", "<li>Bob</li>"]
//Перепишите данный код, заменив цикл for на метод map().*/

/*Задание №9. Встроенные типы объектов
Напишите функцию matrixToArray(matrix), которая принимает двумерный массив (матрицу) matrix,
разворачивает двумерный массив в одномерный и возвращает его. 
Данное задание необходимо решить при помощи аккумулирующих методов.*/

/*function matrixToArray(matrix) {
	function reducer (accumulator, currentValue){
		return accumulator.concat(currentValue);
	};
	return matrix.reduce(reducer, []);
};
var arr = [[1, 2], [3, 4, 5], [6, 7, 8], [9]];
var arr = matrixToArray(arr);
console.log(arr); // [1, 2, 3, 4, 5, 6, 7, 8, 9]
*/
/*Задание №1. Регулярные выражения
Напишите функцию, которая проверяет корректность ввода логина. 
Корректным логином, является строка от 2-х до 10-ти символов, 
содержащая только буквы и цифры, при этом цифра не может быть первой.*/
/*var login = prompt('your login','login');
var regExp = /^[a-z][a-z0-9]{1,9}$/i; // /^[a-z][a-z0-9]{1,9}$/i
function reG (login){
	if (login.length > 2 && login.length <10 && login.match(regExp) !== null){
		alert ('You login ' + login.match(regExp) + ' is correct.');
		document.write('You login is ' + login);
	}else{
		alert ('You login isn`t correct. Try again, please!');
	};
};
reG (login);*/
/*Задание №2. Регулярные выражения
Разработайте регулярные выражения для поиска в тексте телефонных номеров.
Допустимые форматы телефонного номера:
+38(057)707-43-56
0(800)500-75-00
Напишите функцию, которая принимает строку и ищет в данной строке телефонные номера.*/

/*Задание №3. Регулярные выражения
Напишите функцию, которая принимает строку и ищет в данной строке все числа, в том числе и с десятичной точкой.*/

//Задание №5. Функции
//Есть следующий код:
/*let obj = {
   name: "obj",
   print: function () {
		return () => console.log(this.name);
	}   
};

function multiCaller(func, count) {
   for (let i = 0; i < count; i++) {
      func();
   }
}
multiCaller(obj.print(), 3); */ // "obj", 3 раза
//Допишите код используя стрелочные функции, чтобы 
//в консоли браузера появились строки, которые написаны в комментариях.

//Задание №6. Функции
//Есть следующий код:
/*let server = {
   data: 0,
   convertToString: function (callback) {
      callback(()=> {
         return this.data + "";
      });
   }
};
let client = {
   server: server,
   result: "",
   calc: function (data) {
      this.server.data = data;
      this.server.convertToString(this.notification());
   },
   notification: function () {
      return ((callback)=> {
         this.result = callback();
      });
   }
};
client.calc(123);
console.log(client.result); // "123"
console.log(typeof client.result); // "string"*/
//Измените код используя стрелочные функции, чтобы в коде не 
//использовались методы bind().

//Задание №7. Строки
//Есть следующий код:
/*let names = {
   first: "Tom",
   second: "Sam",
   third: ["Ray", "Bob"]
};
let {first: f, second: s, third: [t1, t2]} = names;
console.log(f); // "Tom"
console.log(s); // "Sam"
console.log(t1); // "Ray"
console.log(t2); // "Bob"*/
/*let names = {
   first: "Tom",
   second: "Sam",
   third: "Ray"
};
console.log(`Первый: -${names.first}-,`, `Второй: - "${names.second}",`, `Третий: => '${names.third}'`); */
// "Первый: -Tom-, Второй - "Sam", Третий => 'Ray'"
//Допишите код используя интерполяцию, 
//чтобы в консоли браузера появилась строка, которая написана в комментариях.

//Задание №8. Строки
//Напишите функцию шаблонизации format(), которая выводит строку в обратном порядке.
//Примеры использования функции format():

/*function format(s, ...v) {
   let strings = s.slice(0, s.length);
   strings = strings.reverse();
   v = v.reverse();
   let res = strings[0] + v[0];
   for( let i = 1; i < strings.length; i++){
	   if(strings[i] !== undefined){
		   res = res + strings[i];
	   };
	   if(v[i] !== undefined){
		   res = res + v[i];
	   };
	};
   return res;
}
let res1 = format`${1} + ${2} = ${3}`; // "3 = 2 + 1"
console.log(res1);
let res2 = format`Привет ${"Мир "}`; // "Мир Привет "
console.log(res2);
let res3 = format`left${"<->"}right`; // "right<->left"
console.log(res3);*/

/*Задание №1. Объекты
1. Создайте новый объект tv;
2. Добавьте свойство currentChannel со значением 1;
3. Добавьте метод nextChannel(), который увеличивает currentChannel на единицу;
4. Добавьте метод previousChannel(), который уменьшает currentChannel на единицу;
5. Добавьте метод setChannel(number), который переходит на канал по номеру.*/

/*Задание №2. Объекты
Создайте объект, который описывает MP3 плеер.*/

/*Задание №3. Классы
Напишите классы для объектов из Задание №1. Объекты и Задание №2. Объекты.*/

/*Задание №4. Классы
Напишите класс Геометрическая фигура, определите в нем приватные свойства для задания центра фигуры.
 Для доступа к этим свойствам определите необходимые метод/методы.
На основе этого класса создайте два новых (наследники) – Прямоугольник и Круг. 
В этих классах определите особые приватные свойства. (Например, длина диагонали для Квадрата и радиус для Круга).
 В каждый из классов добавьте публичный метод info(), который выводит на экран всю доступную информацию о фигуре.*/

 /*class GeomFig {
	 constructor(x0, y0){
		 this._x0 = x0;
		 this._y0 = y0;
	 }
	 get x0(){
		 return this._x0;
	 }
	 set x0(x0){
		 this._x0 = x0;
	 }
	 get y0(){
		 return this._y0;
	 }
	 set y0(y0){
		 this._y0 = y0;
	 }
 };
 
 class Rectangle extends GeomFig{
	 constructor (x0, y0, D){
		 super(x0, y0);
		 this._D = D;
	 }
	 info(){
		 for(let key in this){
		 console.log(key + ':' + this[key]);
		 }
	 }
 };
 
 class Circle extends GeomFig{
	 constructor (x0, y0, R){
		 super(x0, y0);
		 this._R = R;
	 }
	 info(){
		 for(let key in this){
		 console.log(key + ':' + this[key]);
		 }
	 }
 };
 let rec = new Rectangle(1, 2, 3);
 let cir = new Circle(4, 5, 6);
 rec.info();
 cir.info();*/
 
/*Задание №5. Классы
Напишите класс Квадрат, определите защищенное свойство для хранения значения стороны. Для доступа 
к этому свойству определите необходимые метод/методы. Также определите публичный метод, который возвращает периметр.
На основе этого класса создайте класс Куб и переопределите метод получения периметра.
Реализуйте 2 версии текущего задания, используя следующие способы переопределения:
1. Без расширения (полностью переопределить метод родителя);
2. С расширением (использовать результат метода родителя для дальнейших расчетов).*/

/*class Square {
	constructor (a){
		this._a = a;
	}
	get a (){
		return this._a;
	}
	set a(a){
		this._a = a;
	}
	getP (){
		return this._a * 4;
	}
	info (){
		for (let key in this){
			console.log(key + ':' + this[key]);
		}
	}
};

class Cube extends Square {
	constructor(a){
		super(a);
	}
	getP (){
		return this._a * 12;
	}
};
let c = new Square(8);
console.log(c.getP());
c.info();

class Cube1 extends Square {
	constructor(a){
		super(a);
	}
	getP (){
		return super.getP * 3;
	}
};
let c1 = new Square(10);
console.log(c1.getP());
c1.info();*/


/*Задание №6. Классы
Напишите класс Круг и реализуйте следующий функционал:
1. Определите конструктор, который запрашивает координаты центра круга, его радиус и инициализирует объект;
2. Определите метод получения длины окружности для текущего объекта (L = 2 * π * R);
3. Определите статический метод, который принимает радиус и возвращает длину окружности для заданного радиуса (L = 2 * π * R);
4. Определите метод получения объекта-круга, который возвращает копию текущего объекта;
5. Определите статический метод, который принимает координаты центра круг, его радиус и возвращает объект круга с заданными параметрами;
6. Определите метод проверки попадания точки в круг;
7. Определите метод преобразования текущего состояния объекта в символьную строку (toString()).*/

/*class Circle{
	constructor(){
		this._x0 = prompt('enter x0','x0');
		this._y0 = prompt('enter y0','y0');
		this._R = prompt('enter R','R');
	}
	getL(){
		return this._R * 2 * 3.14; 
	}
	static length(R){
		return R * 2 * 3.14;
	}
	getCircle(){
		return Object.assign({}, this);
	}
	static circleObj(x0, y0, R){
		return {x0, y0, R};
	}
	isPointIn(x1, y1){
		if(x1 - this._x0 >= this._R || y1 - this._y0 >= this._R){
			console.log('out');
		}else{
			console.log('in');
		}
	}
	toString(){
		let string = '';
		for (let key in this){
			string += key + ':' + this[key];
		};
		return string;
	}
};

let c = new Circle();
console.log(c.getCircle());
console.log(Circle.circleObj(1, 2, 3));
c.isPointIn(6, 8);
console.log(c.toString());*/

/*Задание №1. Symbol
Создайте символ в глобальном реестре с ключом isEmpty.
В Object.prototype добавьте метод, с именем ранее созданного символа. 
Данный метод должен возвращать false если в объекте есть хотя бы одно 
перечисляемое свойство, в противном случае возвращает true.
Примеры использования метода:;*/
/*let sym = Symbol.for('isEmpty');
Object.prototype[sym] = function(){
	for (var key in this) {
    return false;
  }
  return true;
};

let emptyObj = {

};
console.log(emptyObj[Symbol.for('isEmpty')]()); // true
let user = {
   name: 'Tom'
};
console.log(user[Symbol.for('isEmpty')]())*/ // false

/*Задание №2. Итераторы
Напишите итератор для объекта pairwiseConcatination, у которого есть два свойства. 
Каждое свойство является массивом.
Итератор должен возвращать пары значений (массив из двух элементов). 
Пары формируются следующим образом, первая пара должна состоять из первых значений 
свойств объекта pairwiseConcatination, вторая пара из вторых значений и т.д.
Если в свойствах объекта pairwiseConcatination массивы разной длины, 
то количество пар должно быть равное длине меньшего массива.*/
/*let pairwiseConcatination = {
   firstArray: [],
   secondArray: [],
   [Symbol.iterator]() {
	   let current = 0;
	   let max = 0;
	   
	   if(this.firstArray.length < this.secondArray.length){
		   max = this.firstArray.length-1;
	   }else{
		   max = this.secondArray.length-1;
	   };
	   
	   return {
	   next: () => {
            if (current <= max) {
               return {
                  done: false,
                  value: [this.firstArray[current], this.secondArray[current++]]
               }
            } else {
               return {
                  done: true
	   } } } } }
}
pairwiseConcatination.firstArray = ["Tom", "Sam", "Ray"];
pairwiseConcatination.secondArray = [22, 26, 24, 20];
for (let pair of pairwiseConcatination) {
   console.log(pair);
}*/
/*Результат:
["Tom", 22]
["Sam", 26]
["Ray", 24]*/


/*Задание №3. Коллекции
Напишите функцию mapBuilder(keysArray, valuesArrays), которая принимает два массива одинаковой длины.
 Используя эти массивы, функция должна создавать объект типа Map, ключами которого являются значения 
 из первого массива, а значениями Map – значения из второго массива. После этого функция возвращает 
 данный объект Map.
Примеры использования функции:*/
/*function mapBuilder(keysArray, valuesArrays){
	let map = new Map();
	for(let key in keysArray){
		map.set(keysArray[key], valuesArrays[key]);
	};
	return map;
};

let keys = [1, 2, 3, 4];
let values = ["div", "span", "b", "i"];
let map = mapBuilder(keys, values);
console.log(map.size); // 4
console.log(map.get(2));*/ // "span"

/*Задание №4. Коллекции
Напишите функцию sortDistinct(array), которая принимает массив чисел и возвращает 
новый отсортированный по возрастанию массив, в котором отсутствуют дубликаты.
Примеры использования функции:*/
/*function sortDistinct(array){
	array.sort();
   let set = new Set();
   for(let key in array){
		set.add(array[key]);
	};
	let arr = []; 
	for(let key of set){
		arr.push(key);
	};
	return arr;
};
let arr1 = sortDistinct([3, 1, 1, 2, 3, 1, 2]);
console.log(arr1); // [1, 2, 3]
let arr2 = sortDistinct([1, 1, 1, 1,]);
console.log(arr2);*/  // [1]

/*Задание №1. Promise
Напишите функцию createPromiseRandom(min, max, delay), которая возвращает promise, который: 
•	переходит в состояние fulfilled, если min меньше max и генерирует случайное число через delay миллисекунд в диапазоне от min до max;
•	переходит в состояние rejected, если min больше max и возвращает объект ошибки.
Для генерации случайных чисел можно использовать метод Math.random().
Примеры использования функции:*/
/*function createPromiseRandom(min, max, delay) {
   return new Promise(function (resolve, reject) {
	  setTimeout(function () { 
         if (min > max) { 
         reject('bebebe');
      } else {
         resolve(Math.round(Math.random()*100));
      }
   }, delay);

   });
}
let p1 = createPromiseRandom(1, 100, 2000);
p1.then(function (result) {
   console.log(result);
}, 
function (error) {
   console.log(error);
});
let p2 = createPromiseRandom(1000, 100, 3000);
p2.then(function (result) { 
   console.log(result);
}, 
function (error) {
   console.log(error);
});*/
/*Через две секунды, на экране должно появится случайной число от 1 до 100.
Через три секунды, на экране должна появится информация об ошибке.*/

/*Задание №2. Promise
Создайте следующую асинхронную цепочку promise:*/
/*new Promise(function (resolve, reject) {
   let n = prompt('number','number')
   if ( isNaN(n) ) { 
         reject(new Error('first error'));
      } else {
         resolve('number ' + n);
      };
   }).catch(function (error) {
   return new Promise(function (resolve, reject) { 
	  let n;
	  function getN(){
		  n = prompt('number','number');
		  if ( isNaN(n) ) {
			  return getN();
		  };
	  };
	  getN(n);
	  resolve('number ' + n);
      });
}).then(function (result) {
	console.log(result)
   // Вывод number на экран
});*/

